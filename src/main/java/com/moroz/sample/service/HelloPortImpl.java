/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.moroz.sample.service;

import com.moroz.sample.model.Person;
import com.moroz.sample.SoutService;
import com.moroz.sample.repo.PersonRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.context.support.SpringBeanAutowiringSupport;

import java.util.Date;
import java.util.logging.Logger;

/**
 * Examples code for spring boot with CXF services. HelloPortImpl is the
 * implementation for Hello interface. This class was generated by Apache CXF
 * 3.1.0 2015-05-18T13:02:03.098-05:00 Generated source version: 3.1.0
 */

@javax.jws.WebService(serviceName = "HelloService", portName = "HelloPort",
                    targetNamespace = "http://service.sample.moroz.com/",
                    endpointInterface = "com.moroz.sample.service.Hello")
public class HelloPortImpl extends SpringBeanAutowiringSupport implements Hello {

    private static final Logger LOG = Logger.getLogger(HelloPortImpl.class.getName());

    @Autowired
    private SoutService soutService;

    @Autowired
    private PersonRepository personRepository;

    @Override
    public String save(String name, String lastName, String city) {
        LOG.info("Executing operation sayHello" + name + lastName);
        LOG.info(soutService.checkInjection());
        LOG.info("Trying to save person with spring data...");
        Person person = new Person(name, lastName, new Date(), city);
        try {
            personRepository.save(person);
            return "Hello, Welcome to CXF Spring boot " + name + " " + lastName + "!!!";
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    @Override
    public String deleteById(Long id) {
        LOG.info("Executing operation deleteById: " + id);
        LOG.info("Trying to delete person by ID with spring data...");
        try {
            //Person person = personRepository.findById(id).orElseThrow(EntityNotFoundException::new);
            personRepository.deleteById(id);
            return "Person with id: " + id + " deleted.";
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }
}
